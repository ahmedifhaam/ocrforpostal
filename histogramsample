from __future__ import print_function
from __future__ import division
import cv2 as cv
import numpy as np
import argparse

parser = argparse.ArgumentParser(description='Code for histogram calculation tutorial.')
parser.add_argument('--input',help='path to input image ',default='add.jpg')
args = parser.parse_args()



src = cv.imread(args.input)
if(src is None ):
    print ('Could not open or find the image :',args.input)
    exit(0)

bgr_planes = cv.split(src)

histSize= 256

histRange = (0,256)

accumulative = False;

b_hist = cv.calcHist(bgr_planes,[0],None,[histSize],histRange,accumulate=accumulative)
g_hist = cv.calcHist(bgr_planes,[1],None,[histSize],histRange,accumulate=accumulative)
r_hist = cv.calcHist(bgr_planes,[2],None,[histSize],histRange,accumulate=accumulative)

hist_w = 512
hist_h = 400
bin_w = int(round(hist_w/histSize))

histImage  = np.zeros((hist_h,hist_w,3),dtype=np.uint8)

cv.normalize(b_hist,b_hist,alpha=0,beta=0,norm_type=cv.NORM_MINMAX)
cv.normalize(g_hist,g_hist,alpha=0,beta=0,norm_type=cv.NORM_MINMAX)
cv.normalize(r_hist,r_hist,alpha=0,beta=0,norm_type=cv.NORM_MINMAX)

for i in range(1,histSize):
    cv.line(histImage,(bin_w*(i-1), hist_h - int(round(b_hist[i-1]))),\
    (bin_w*(i)), hist_h - int(round(b_hist)),\
    (255,0,0),thickness=2)
    cv.line(histImage,(bin_w*(i-1), hist_h - int(round(g_hist[i-1]))),\
    (bin_w*(i)), hist_h - int(round(g_hist)),\
    (0,255,0),thickness=2)
    cv.line(histImage,(bin_w*(i-1), hist_h - int(round(r_hist[i-1]))),\
    (bin_w*(i)), hist_h - int(round(r_hist)),\
    (0,0,255),thickness=2)

cv.imshow('source image',src)
cv.imshow('calchist demo' , histImage)
cv.waitKey()
